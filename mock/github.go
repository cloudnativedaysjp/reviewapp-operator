// Code generated by MockGen. DO NOT EDIT.
// Source: gateways/github.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	gateways "github.com/cloudnativedaysjp/reviewapp-operator/gateways"
	gomock "github.com/golang/mock/gomock"
)

// MockGitHubIFace is a mock of GitHubIFace interface.
type MockGitHubIFace struct {
	ctrl     *gomock.Controller
	recorder *MockGitHubIFaceMockRecorder
}

// MockGitHubIFaceMockRecorder is the mock recorder for MockGitHubIFace.
type MockGitHubIFaceMockRecorder struct {
	mock *MockGitHubIFace
}

// NewMockGitHubIFace creates a new mock instance.
func NewMockGitHubIFace(ctrl *gomock.Controller) *MockGitHubIFace {
	mock := &MockGitHubIFace{ctrl: ctrl}
	mock.recorder = &MockGitHubIFaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGitHubIFace) EXPECT() *MockGitHubIFaceMockRecorder {
	return m.recorder
}

// WithCredential mocks base method.
func (m *MockGitHubIFace) WithCredential(username, token string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithCredential", username, token)
	ret0, _ := ret[0].(error)
	return ret0
}

// WithCredential indicates an expected call of WithCredential.
func (mr *MockGitHubIFaceMockRecorder) WithCredential(username, token interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithCredential", reflect.TypeOf((*MockGitHubIFace)(nil).WithCredential), username, token)
}

// ListOpenPullRequests mocks base method.
func (m *MockGitHubIFace) ListOpenPullRequests(ctx context.Context, org, repo string) ([]*gateways.PullRequest, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListOpenPullRequests", ctx, org, repo)
	ret0, _ := ret[0].([]*gateways.PullRequest)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListOpenPullRequests indicates an expected call of ListOpenPullRequests.
func (mr *MockGitHubIFaceMockRecorder) ListOpenPullRequests(ctx, org, repo interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListOpenPullRequests", reflect.TypeOf((*MockGitHubIFace)(nil).ListOpenPullRequests), ctx, org, repo)
}

// GetPullRequest mocks base method.
func (m *MockGitHubIFace) GetPullRequest(ctx context.Context, org, repo string, prNum int) (*gateways.PullRequest, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPullRequest", ctx, org, repo, prNum)
	ret0, _ := ret[0].(*gateways.PullRequest)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPullRequest indicates an expected call of GetPullRequest.
func (mr *MockGitHubIFaceMockRecorder) GetPullRequest(ctx, org, repo, prNum interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPullRequest", reflect.TypeOf((*MockGitHubIFace)(nil).GetPullRequest), ctx, org, repo, prNum)
}

// CommentToPullRequest mocks base method.
func (m *MockGitHubIFace) CommentToPullRequest(ctx context.Context, pr gateways.PullRequest, comment string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CommentToPullRequest", ctx, pr, comment)
	ret0, _ := ret[0].(error)
	return ret0
}

// CommentToPullRequest indicates an expected call of CommentToPullRequest.
func (mr *MockGitHubIFaceMockRecorder) CommentToPullRequest(ctx, pr, comment interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CommentToPullRequest", reflect.TypeOf((*MockGitHubIFace)(nil).CommentToPullRequest), ctx, pr, comment)
}

// GetCommitHashes mocks base method.
func (m *MockGitHubIFace) GetCommitHashes(ctx context.Context, pr gateways.PullRequest) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCommitHashes", ctx, pr)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCommitHashes indicates an expected call of GetCommitHashes.
func (mr *MockGitHubIFaceMockRecorder) GetCommitHashes(ctx, pr interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCommitHashes", reflect.TypeOf((*MockGitHubIFace)(nil).GetCommitHashes), ctx, pr)
}
