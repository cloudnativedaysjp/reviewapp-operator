// Code generated by MockGen. DO NOT EDIT.
// Source: ./pkg/gateways/githubapi/githubapi.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	v1alpha1 "github.com/cloudnativedaysjp/reviewapp-operator/api/v1alpha1"
	models "github.com/cloudnativedaysjp/reviewapp-operator/pkg/models"
	gomock "github.com/golang/mock/gomock"
)

// MockGitApiIface is a mock of GitApiIface interface.
type MockGitApiIface struct {
	ctrl     *gomock.Controller
	recorder *MockGitApiIfaceMockRecorder
}

// MockGitApiIfaceMockRecorder is the mock recorder for MockGitApiIface.
type MockGitApiIfaceMockRecorder struct {
	mock *MockGitApiIface
}

// NewMockGitApiIface creates a new mock instance.
func NewMockGitApiIface(ctrl *gomock.Controller) *MockGitApiIface {
	mock := &MockGitApiIface{ctrl: ctrl}
	mock.recorder = &MockGitApiIfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGitApiIface) EXPECT() *MockGitApiIfaceMockRecorder {
	return m.recorder
}

// CommentToPullRequest mocks base method.
func (m *MockGitApiIface) CommentToPullRequest(ctx context.Context, pr v1alpha1.PullRequest, comment string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CommentToPullRequest", ctx, pr, comment)
	ret0, _ := ret[0].(error)
	return ret0
}

// CommentToPullRequest indicates an expected call of CommentToPullRequest.
func (mr *MockGitApiIfaceMockRecorder) CommentToPullRequest(ctx, pr, comment interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CommentToPullRequest", reflect.TypeOf((*MockGitApiIface)(nil).CommentToPullRequest), ctx, pr, comment)
}

// GetPullRequest mocks base method.
func (m *MockGitApiIface) GetPullRequest(ctx context.Context, appRepoTarget v1alpha1.ReviewAppCommonSpecAppTarget, prNum int) (v1alpha1.PullRequest, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPullRequest", ctx, appRepoTarget, prNum)
	ret0, _ := ret[0].(v1alpha1.PullRequest)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPullRequest indicates an expected call of GetPullRequest.
func (mr *MockGitApiIfaceMockRecorder) GetPullRequest(ctx, appRepoTarget, prNum interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPullRequest", reflect.TypeOf((*MockGitApiIface)(nil).GetPullRequest), ctx, appRepoTarget, prNum)
}

// ListOpenPullRequests mocks base method.
func (m *MockGitApiIface) ListOpenPullRequests(ctx context.Context, appRepoTarget v1alpha1.ReviewAppCommonSpecAppTarget) (v1alpha1.PullRequestList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListOpenPullRequests", ctx, appRepoTarget)
	ret0, _ := ret[0].(v1alpha1.PullRequestList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListOpenPullRequests indicates an expected call of ListOpenPullRequests.
func (mr *MockGitApiIfaceMockRecorder) ListOpenPullRequests(ctx, appRepoTarget interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListOpenPullRequests", reflect.TypeOf((*MockGitApiIface)(nil).ListOpenPullRequests), ctx, appRepoTarget)
}

// WithCredential mocks base method.
func (m *MockGitApiIface) WithCredential(credential models.GitCredential) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithCredential", credential)
	ret0, _ := ret[0].(error)
	return ret0
}

// WithCredential indicates an expected call of WithCredential.
func (mr *MockGitApiIfaceMockRecorder) WithCredential(credential interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithCredential", reflect.TypeOf((*MockGitApiIface)(nil).WithCredential), credential)
}
