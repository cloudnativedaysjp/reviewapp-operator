// Code generated by MockGen. DO NOT EDIT.
// Source: ./pkg/gateways/kubernetes/client.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	v1alpha1 "github.com/cloudnativedaysjp/reviewapp-operator/api/v1alpha1"
	v1alpha1_iface "github.com/cloudnativedaysjp/reviewapp-operator/api/v1alpha1/iface"
	gomock "github.com/golang/mock/gomock"
	v1 "k8s.io/api/batch/v1"
)

// MockKubernetesIface is a mock of KubernetesIface interface.
type MockKubernetesIface struct {
	ctrl     *gomock.Controller
	recorder *MockKubernetesIfaceMockRecorder
}

// MockKubernetesIfaceMockRecorder is the mock recorder for MockKubernetesIface.
type MockKubernetesIfaceMockRecorder struct {
	mock *MockKubernetesIface
}

// NewMockKubernetesIface creates a new mock instance.
func NewMockKubernetesIface(ctrl *gomock.Controller) *MockKubernetesIface {
	mock := &MockKubernetesIface{ctrl: ctrl}
	mock.recorder = &MockKubernetesIfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockKubernetesIface) EXPECT() *MockKubernetesIfaceMockRecorder {
	return m.recorder
}

// AddFinalizersToReviewApp mocks base method.
func (m *MockKubernetesIface) AddFinalizersToReviewApp(ctx context.Context, ra v1alpha1.ReviewApp, finalizers ...string) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, ra}
	for _, a := range finalizers {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AddFinalizersToReviewApp", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddFinalizersToReviewApp indicates an expected call of AddFinalizersToReviewApp.
func (mr *MockKubernetesIfaceMockRecorder) AddFinalizersToReviewApp(ctx, ra interface{}, finalizers ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, ra}, finalizers...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddFinalizersToReviewApp", reflect.TypeOf((*MockKubernetesIface)(nil).AddFinalizersToReviewApp), varargs...)
}

// ApplyPullRequest mocks base method.
func (m *MockKubernetesIface) ApplyPullRequest(ctx context.Context, pr v1alpha1.PullRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ApplyPullRequest", ctx, pr)
	ret0, _ := ret[0].(error)
	return ret0
}

// ApplyPullRequest indicates an expected call of ApplyPullRequest.
func (mr *MockKubernetesIfaceMockRecorder) ApplyPullRequest(ctx, pr interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ApplyPullRequest", reflect.TypeOf((*MockKubernetesIface)(nil).ApplyPullRequest), ctx, pr)
}

// ApplyPullRequestWithOwnerRef mocks base method.
func (m *MockKubernetesIface) ApplyPullRequestWithOwnerRef(ctx context.Context, pr v1alpha1.PullRequest, owner v1alpha1.ReviewAppManager) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ApplyPullRequestWithOwnerRef", ctx, pr, owner)
	ret0, _ := ret[0].(error)
	return ret0
}

// ApplyPullRequestWithOwnerRef indicates an expected call of ApplyPullRequestWithOwnerRef.
func (mr *MockKubernetesIfaceMockRecorder) ApplyPullRequestWithOwnerRef(ctx, pr, owner interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ApplyPullRequestWithOwnerRef", reflect.TypeOf((*MockKubernetesIface)(nil).ApplyPullRequestWithOwnerRef), ctx, pr, owner)
}

// ApplyReviewAppWithOwnerRef mocks base method.
func (m *MockKubernetesIface) ApplyReviewAppWithOwnerRef(ctx context.Context, ra v1alpha1.ReviewApp, owner v1alpha1.ReviewAppManager) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ApplyReviewAppWithOwnerRef", ctx, ra, owner)
	ret0, _ := ret[0].(error)
	return ret0
}

// ApplyReviewAppWithOwnerRef indicates an expected call of ApplyReviewAppWithOwnerRef.
func (mr *MockKubernetesIfaceMockRecorder) ApplyReviewAppWithOwnerRef(ctx, ra, owner interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ApplyReviewAppWithOwnerRef", reflect.TypeOf((*MockKubernetesIface)(nil).ApplyReviewAppWithOwnerRef), ctx, ra, owner)
}

// CreateJob mocks base method.
func (m *MockKubernetesIface) CreateJob(arg0 context.Context, arg1 *v1.Job) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateJob", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateJob indicates an expected call of CreateJob.
func (mr *MockKubernetesIfaceMockRecorder) CreateJob(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateJob", reflect.TypeOf((*MockKubernetesIface)(nil).CreateJob), arg0, arg1)
}

// DeletePullRequest mocks base method.
func (m *MockKubernetesIface) DeletePullRequest(ctx context.Context, namespace, name string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletePullRequest", ctx, namespace, name)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeletePullRequest indicates an expected call of DeletePullRequest.
func (mr *MockKubernetesIfaceMockRecorder) DeletePullRequest(ctx, namespace, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePullRequest", reflect.TypeOf((*MockKubernetesIface)(nil).DeletePullRequest), ctx, namespace, name)
}

// DeleteReviewApp mocks base method.
func (m *MockKubernetesIface) DeleteReviewApp(ctx context.Context, namespace, name string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteReviewApp", ctx, namespace, name)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteReviewApp indicates an expected call of DeleteReviewApp.
func (mr *MockKubernetesIfaceMockRecorder) DeleteReviewApp(ctx, namespace, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteReviewApp", reflect.TypeOf((*MockKubernetesIface)(nil).DeleteReviewApp), ctx, namespace, name)
}

// GetApplicationTemplate mocks base method.
func (m *MockKubernetesIface) GetApplicationTemplate(arg0 context.Context, arg1 v1alpha1.ReviewAppCommonSpec) (v1alpha1.ApplicationTemplate, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetApplicationTemplate", arg0, arg1)
	ret0, _ := ret[0].(v1alpha1.ApplicationTemplate)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetApplicationTemplate indicates an expected call of GetApplicationTemplate.
func (mr *MockKubernetesIfaceMockRecorder) GetApplicationTemplate(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetApplicationTemplate", reflect.TypeOf((*MockKubernetesIface)(nil).GetApplicationTemplate), arg0, arg1)
}

// GetArgoCDAppFromReviewAppStatus mocks base method.
func (m *MockKubernetesIface) GetArgoCDAppFromReviewAppStatus(arg0 context.Context, arg1 v1alpha1.ReviewAppStatus) (v1alpha1.Application, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetArgoCDAppFromReviewAppStatus", arg0, arg1)
	ret0, _ := ret[0].(v1alpha1.Application)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetArgoCDAppFromReviewAppStatus indicates an expected call of GetArgoCDAppFromReviewAppStatus.
func (mr *MockKubernetesIfaceMockRecorder) GetArgoCDAppFromReviewAppStatus(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetArgoCDAppFromReviewAppStatus", reflect.TypeOf((*MockKubernetesIface)(nil).GetArgoCDAppFromReviewAppStatus), arg0, arg1)
}

// GetLatestJobFromLabel mocks base method.
func (m *MockKubernetesIface) GetLatestJobFromLabel(ctx context.Context, namespace, labelKey, labelValue string) (*v1.Job, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLatestJobFromLabel", ctx, namespace, labelKey, labelValue)
	ret0, _ := ret[0].(*v1.Job)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLatestJobFromLabel indicates an expected call of GetLatestJobFromLabel.
func (mr *MockKubernetesIfaceMockRecorder) GetLatestJobFromLabel(ctx, namespace, labelKey, labelValue interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLatestJobFromLabel", reflect.TypeOf((*MockKubernetesIface)(nil).GetLatestJobFromLabel), ctx, namespace, labelKey, labelValue)
}

// GetManifestsTemplate mocks base method.
func (m *MockKubernetesIface) GetManifestsTemplate(arg0 context.Context, arg1 v1alpha1.ReviewAppCommonSpec) ([]v1alpha1.ManifestsTemplate, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetManifestsTemplate", arg0, arg1)
	ret0, _ := ret[0].([]v1alpha1.ManifestsTemplate)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetManifestsTemplate indicates an expected call of GetManifestsTemplate.
func (mr *MockKubernetesIfaceMockRecorder) GetManifestsTemplate(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetManifestsTemplate", reflect.TypeOf((*MockKubernetesIface)(nil).GetManifestsTemplate), arg0, arg1)
}

// GetPreStopJobTemplate mocks base method.
func (m *MockKubernetesIface) GetPreStopJobTemplate(ctx context.Context, ra v1alpha1.ReviewApp) (v1alpha1.JobTemplate, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPreStopJobTemplate", ctx, ra)
	ret0, _ := ret[0].(v1alpha1.JobTemplate)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPreStopJobTemplate indicates an expected call of GetPreStopJobTemplate.
func (mr *MockKubernetesIfaceMockRecorder) GetPreStopJobTemplate(ctx, ra interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPreStopJobTemplate", reflect.TypeOf((*MockKubernetesIface)(nil).GetPreStopJobTemplate), ctx, ra)
}

// GetPullRequest mocks base method.
func (m *MockKubernetesIface) GetPullRequest(ctx context.Context, namespace, name string) (v1alpha1.PullRequest, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPullRequest", ctx, namespace, name)
	ret0, _ := ret[0].(v1alpha1.PullRequest)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPullRequest indicates an expected call of GetPullRequest.
func (mr *MockKubernetesIfaceMockRecorder) GetPullRequest(ctx, namespace, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPullRequest", reflect.TypeOf((*MockKubernetesIface)(nil).GetPullRequest), ctx, namespace, name)
}

// GetReviewApp mocks base method.
func (m *MockKubernetesIface) GetReviewApp(ctx context.Context, namespace, name string) (v1alpha1.ReviewApp, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetReviewApp", ctx, namespace, name)
	ret0, _ := ret[0].(v1alpha1.ReviewApp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetReviewApp indicates an expected call of GetReviewApp.
func (mr *MockKubernetesIfaceMockRecorder) GetReviewApp(ctx, namespace, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetReviewApp", reflect.TypeOf((*MockKubernetesIface)(nil).GetReviewApp), ctx, namespace, name)
}

// GetReviewAppManager mocks base method.
func (m *MockKubernetesIface) GetReviewAppManager(ctx context.Context, namespace, name string) (v1alpha1.ReviewAppManager, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetReviewAppManager", ctx, namespace, name)
	ret0, _ := ret[0].(v1alpha1.ReviewAppManager)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetReviewAppManager indicates an expected call of GetReviewAppManager.
func (mr *MockKubernetesIfaceMockRecorder) GetReviewAppManager(ctx, namespace, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetReviewAppManager", reflect.TypeOf((*MockKubernetesIface)(nil).GetReviewAppManager), ctx, namespace, name)
}

// GetSecretValue mocks base method.
func (m_2 *MockKubernetesIface) GetSecretValue(ctx context.Context, namespace string, m v1alpha1_iface.AppOrInfraRepoTarget) (string, error) {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "GetSecretValue", ctx, namespace, m)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSecretValue indicates an expected call of GetSecretValue.
func (mr *MockKubernetesIfaceMockRecorder) GetSecretValue(ctx, namespace, m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSecretValue", reflect.TypeOf((*MockKubernetesIface)(nil).GetSecretValue), ctx, namespace, m)
}

// PatchPullRequestStatus mocks base method.
func (m *MockKubernetesIface) PatchPullRequestStatus(ctx context.Context, pr v1alpha1.PullRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PatchPullRequestStatus", ctx, pr)
	ret0, _ := ret[0].(error)
	return ret0
}

// PatchPullRequestStatus indicates an expected call of PatchPullRequestStatus.
func (mr *MockKubernetesIfaceMockRecorder) PatchPullRequestStatus(ctx, pr interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchPullRequestStatus", reflect.TypeOf((*MockKubernetesIface)(nil).PatchPullRequestStatus), ctx, pr)
}

// PatchReviewAppStatus mocks base method.
func (m *MockKubernetesIface) PatchReviewAppStatus(ctx context.Context, ra v1alpha1.ReviewApp) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PatchReviewAppStatus", ctx, ra)
	ret0, _ := ret[0].(error)
	return ret0
}

// PatchReviewAppStatus indicates an expected call of PatchReviewAppStatus.
func (mr *MockKubernetesIfaceMockRecorder) PatchReviewAppStatus(ctx, ra interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchReviewAppStatus", reflect.TypeOf((*MockKubernetesIface)(nil).PatchReviewAppStatus), ctx, ra)
}

// RemoveFinalizersFromReviewApp mocks base method.
func (m *MockKubernetesIface) RemoveFinalizersFromReviewApp(ctx context.Context, ra v1alpha1.ReviewApp, finalizers ...string) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, ra}
	for _, a := range finalizers {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RemoveFinalizersFromReviewApp", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveFinalizersFromReviewApp indicates an expected call of RemoveFinalizersFromReviewApp.
func (mr *MockKubernetesIfaceMockRecorder) RemoveFinalizersFromReviewApp(ctx, ra interface{}, finalizers ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, ra}, finalizers...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveFinalizersFromReviewApp", reflect.TypeOf((*MockKubernetesIface)(nil).RemoveFinalizersFromReviewApp), varargs...)
}
