// Code generated by MockGen. DO NOT EDIT.
// Source: ./domain/repositories/gitapi.go

// Package mock_repositories is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	models "github.com/cloudnativedaysjp/reviewapp-operator/domain/models"
	gomock "github.com/golang/mock/gomock"
)

// MockGitAPI is a mock of GitAPI interface.
type MockGitAPI struct {
	ctrl     *gomock.Controller
	recorder *MockGitAPIMockRecorder
}

// MockGitAPIMockRecorder is the mock recorder for MockGitAPI.
type MockGitAPIMockRecorder struct {
	mock *MockGitAPI
}

// NewMockGitAPI creates a new mock instance.
func NewMockGitAPI(ctrl *gomock.Controller) *MockGitAPI {
	mock := &MockGitAPI{ctrl: ctrl}
	mock.recorder = &MockGitAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGitAPI) EXPECT() *MockGitAPIMockRecorder {
	return m.recorder
}

// CommentToPullRequest mocks base method.
func (m *MockGitAPI) CommentToPullRequest(ctx context.Context, pr models.PullRequest, comment string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CommentToPullRequest", ctx, pr, comment)
	ret0, _ := ret[0].(error)
	return ret0
}

// CommentToPullRequest indicates an expected call of CommentToPullRequest.
func (mr *MockGitAPIMockRecorder) CommentToPullRequest(ctx, pr, comment interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CommentToPullRequest", reflect.TypeOf((*MockGitAPI)(nil).CommentToPullRequest), ctx, pr, comment)
}

// GetCommitHashes mocks base method.
func (m *MockGitAPI) GetCommitHashes(ctx context.Context, pr models.PullRequest) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCommitHashes", ctx, pr)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCommitHashes indicates an expected call of GetCommitHashes.
func (mr *MockGitAPIMockRecorder) GetCommitHashes(ctx, pr interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCommitHashes", reflect.TypeOf((*MockGitAPI)(nil).GetCommitHashes), ctx, pr)
}

// GetPullRequest mocks base method.
func (m *MockGitAPI) GetPullRequest(ctx context.Context, appRepoTarget models.AppRepoTarget, prNum int) (models.PullRequest, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPullRequest", ctx, appRepoTarget, prNum)
	ret0, _ := ret[0].(models.PullRequest)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPullRequest indicates an expected call of GetPullRequest.
func (mr *MockGitAPIMockRecorder) GetPullRequest(ctx, appRepoTarget, prNum interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPullRequest", reflect.TypeOf((*MockGitAPI)(nil).GetPullRequest), ctx, appRepoTarget, prNum)
}

// ListOpenPullRequests mocks base method.
func (m *MockGitAPI) ListOpenPullRequests(ctx context.Context, appRepoTarget models.AppRepoTarget) (models.PullRequests, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListOpenPullRequests", ctx, appRepoTarget)
	ret0, _ := ret[0].(models.PullRequests)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListOpenPullRequests indicates an expected call of ListOpenPullRequests.
func (mr *MockGitAPIMockRecorder) ListOpenPullRequests(ctx, appRepoTarget interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListOpenPullRequests", reflect.TypeOf((*MockGitAPI)(nil).ListOpenPullRequests), ctx, appRepoTarget)
}

// WithCredential mocks base method.
func (m *MockGitAPI) WithCredential(credential models.GitCredential) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithCredential", credential)
	ret0, _ := ret[0].(error)
	return ret0
}

// WithCredential indicates an expected call of WithCredential.
func (mr *MockGitAPIMockRecorder) WithCredential(credential interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithCredential", reflect.TypeOf((*MockGitAPI)(nil).WithCredential), credential)
}
