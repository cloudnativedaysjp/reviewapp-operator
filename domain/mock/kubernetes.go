// Code generated by MockGen. DO NOT EDIT.
// Source: ./domain/repositories/kubernetes.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	models "github.com/cloudnativedaysjp/reviewapp-operator/domain/models"
	gomock "github.com/golang/mock/gomock"
	v1 "k8s.io/api/batch/v1"
)

// MockKubernetesRepository is a mock of KubernetesRepository interface.
type MockKubernetesRepository struct {
	ctrl     *gomock.Controller
	recorder *MockKubernetesRepositoryMockRecorder
}

// MockKubernetesRepositoryMockRecorder is the mock recorder for MockKubernetesRepository.
type MockKubernetesRepositoryMockRecorder struct {
	mock *MockKubernetesRepository
}

// NewMockKubernetesRepository creates a new mock instance.
func NewMockKubernetesRepository(ctrl *gomock.Controller) *MockKubernetesRepository {
	mock := &MockKubernetesRepository{ctrl: ctrl}
	mock.recorder = &MockKubernetesRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockKubernetesRepository) EXPECT() *MockKubernetesRepositoryMockRecorder {
	return m.recorder
}

// AddFinalizersToReviewApp mocks base method.
func (m *MockKubernetesRepository) AddFinalizersToReviewApp(ctx context.Context, ra models.ReviewApp, finalizers ...string) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, ra}
	for _, a := range finalizers {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AddFinalizersToReviewApp", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddFinalizersToReviewApp indicates an expected call of AddFinalizersToReviewApp.
func (mr *MockKubernetesRepositoryMockRecorder) AddFinalizersToReviewApp(ctx, ra interface{}, finalizers ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, ra}, finalizers...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddFinalizersToReviewApp", reflect.TypeOf((*MockKubernetesRepository)(nil).AddFinalizersToReviewApp), varargs...)
}

// ApplyReviewAppWithOwnerRef mocks base method.
func (m *MockKubernetesRepository) ApplyReviewAppWithOwnerRef(ctx context.Context, ra models.ReviewApp, owner models.ReviewAppManager) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ApplyReviewAppWithOwnerRef", ctx, ra, owner)
	ret0, _ := ret[0].(error)
	return ret0
}

// ApplyReviewAppWithOwnerRef indicates an expected call of ApplyReviewAppWithOwnerRef.
func (mr *MockKubernetesRepositoryMockRecorder) ApplyReviewAppWithOwnerRef(ctx, ra, owner interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ApplyReviewAppWithOwnerRef", reflect.TypeOf((*MockKubernetesRepository)(nil).ApplyReviewAppWithOwnerRef), ctx, ra, owner)
}

// CreateJob mocks base method.
func (m *MockKubernetesRepository) CreateJob(ctx context.Context, job *v1.Job) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateJob", ctx, job)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateJob indicates an expected call of CreateJob.
func (mr *MockKubernetesRepositoryMockRecorder) CreateJob(ctx, job interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateJob", reflect.TypeOf((*MockKubernetesRepository)(nil).CreateJob), ctx, job)
}

// DeleteReviewApp mocks base method.
func (m *MockKubernetesRepository) DeleteReviewApp(ctx context.Context, namespace, name string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteReviewApp", ctx, namespace, name)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteReviewApp indicates an expected call of DeleteReviewApp.
func (mr *MockKubernetesRepositoryMockRecorder) DeleteReviewApp(ctx, namespace, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteReviewApp", reflect.TypeOf((*MockKubernetesRepository)(nil).DeleteReviewApp), ctx, namespace, name)
}

// GetApplicationTemplate mocks base method.
func (m_2 *MockKubernetesRepository) GetApplicationTemplate(ctx context.Context, m models.ReviewAppOrReviewAppManager) (models.ApplicationTemplate, error) {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "GetApplicationTemplate", ctx, m)
	ret0, _ := ret[0].(models.ApplicationTemplate)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetApplicationTemplate indicates an expected call of GetApplicationTemplate.
func (mr *MockKubernetesRepositoryMockRecorder) GetApplicationTemplate(ctx, m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetApplicationTemplate", reflect.TypeOf((*MockKubernetesRepository)(nil).GetApplicationTemplate), ctx, m)
}

// GetArgoCDAppFromReviewAppStatus mocks base method.
func (m *MockKubernetesRepository) GetArgoCDAppFromReviewAppStatus(ctx context.Context, raStatus models.ReviewAppStatus) (models.Application, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetArgoCDAppFromReviewAppStatus", ctx, raStatus)
	ret0, _ := ret[0].(models.Application)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetArgoCDAppFromReviewAppStatus indicates an expected call of GetArgoCDAppFromReviewAppStatus.
func (mr *MockKubernetesRepositoryMockRecorder) GetArgoCDAppFromReviewAppStatus(ctx, raStatus interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetArgoCDAppFromReviewAppStatus", reflect.TypeOf((*MockKubernetesRepository)(nil).GetArgoCDAppFromReviewAppStatus), ctx, raStatus)
}

// GetLatestJobFromLabel mocks base method.
func (m *MockKubernetesRepository) GetLatestJobFromLabel(ctx context.Context, namespace, labelKey, labelValue string) (*v1.Job, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLatestJobFromLabel", ctx, namespace, labelKey, labelValue)
	ret0, _ := ret[0].(*v1.Job)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLatestJobFromLabel indicates an expected call of GetLatestJobFromLabel.
func (mr *MockKubernetesRepositoryMockRecorder) GetLatestJobFromLabel(ctx, namespace, labelKey, labelValue interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLatestJobFromLabel", reflect.TypeOf((*MockKubernetesRepository)(nil).GetLatestJobFromLabel), ctx, namespace, labelKey, labelValue)
}

// GetManifestsTemplate mocks base method.
func (m_2 *MockKubernetesRepository) GetManifestsTemplate(ctx context.Context, m models.ReviewAppOrReviewAppManager) ([]models.ManifestsTemplate, error) {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "GetManifestsTemplate", ctx, m)
	ret0, _ := ret[0].([]models.ManifestsTemplate)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetManifestsTemplate indicates an expected call of GetManifestsTemplate.
func (mr *MockKubernetesRepositoryMockRecorder) GetManifestsTemplate(ctx, m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetManifestsTemplate", reflect.TypeOf((*MockKubernetesRepository)(nil).GetManifestsTemplate), ctx, m)
}

// GetPreStopJobTemplate mocks base method.
func (m *MockKubernetesRepository) GetPreStopJobTemplate(ctx context.Context, ra models.ReviewApp) (models.JobTemplate, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPreStopJobTemplate", ctx, ra)
	ret0, _ := ret[0].(models.JobTemplate)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPreStopJobTemplate indicates an expected call of GetPreStopJobTemplate.
func (mr *MockKubernetesRepositoryMockRecorder) GetPreStopJobTemplate(ctx, ra interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPreStopJobTemplate", reflect.TypeOf((*MockKubernetesRepository)(nil).GetPreStopJobTemplate), ctx, ra)
}

// GetReviewApp mocks base method.
func (m *MockKubernetesRepository) GetReviewApp(ctx context.Context, namespace, name string) (models.ReviewApp, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetReviewApp", ctx, namespace, name)
	ret0, _ := ret[0].(models.ReviewApp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetReviewApp indicates an expected call of GetReviewApp.
func (mr *MockKubernetesRepositoryMockRecorder) GetReviewApp(ctx, namespace, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetReviewApp", reflect.TypeOf((*MockKubernetesRepository)(nil).GetReviewApp), ctx, namespace, name)
}

// GetReviewAppManager mocks base method.
func (m *MockKubernetesRepository) GetReviewAppManager(ctx context.Context, namespace, name string) (models.ReviewAppManager, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetReviewAppManager", ctx, namespace, name)
	ret0, _ := ret[0].(models.ReviewAppManager)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetReviewAppManager indicates an expected call of GetReviewAppManager.
func (mr *MockKubernetesRepositoryMockRecorder) GetReviewAppManager(ctx, namespace, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetReviewAppManager", reflect.TypeOf((*MockKubernetesRepository)(nil).GetReviewAppManager), ctx, namespace, name)
}

// GetSecretValue mocks base method.
func (m_2 *MockKubernetesRepository) GetSecretValue(ctx context.Context, namespace string, m models.AppOrInfraRepoTarget) (string, error) {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "GetSecretValue", ctx, namespace, m)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSecretValue indicates an expected call of GetSecretValue.
func (mr *MockKubernetesRepositoryMockRecorder) GetSecretValue(ctx, namespace, m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSecretValue", reflect.TypeOf((*MockKubernetesRepository)(nil).GetSecretValue), ctx, namespace, m)
}

// PatchReviewAppStatus mocks base method.
func (m *MockKubernetesRepository) PatchReviewAppStatus(ctx context.Context, ra models.ReviewApp) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PatchReviewAppStatus", ctx, ra)
	ret0, _ := ret[0].(error)
	return ret0
}

// PatchReviewAppStatus indicates an expected call of PatchReviewAppStatus.
func (mr *MockKubernetesRepositoryMockRecorder) PatchReviewAppStatus(ctx, ra interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchReviewAppStatus", reflect.TypeOf((*MockKubernetesRepository)(nil).PatchReviewAppStatus), ctx, ra)
}

// RemoveFinalizersFromReviewApp mocks base method.
func (m *MockKubernetesRepository) RemoveFinalizersFromReviewApp(ctx context.Context, ra models.ReviewApp, finalizers ...string) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, ra}
	for _, a := range finalizers {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RemoveFinalizersFromReviewApp", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveFinalizersFromReviewApp indicates an expected call of RemoveFinalizersFromReviewApp.
func (mr *MockKubernetesRepositoryMockRecorder) RemoveFinalizersFromReviewApp(ctx, ra interface{}, finalizers ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, ra}, finalizers...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveFinalizersFromReviewApp", reflect.TypeOf((*MockKubernetesRepository)(nil).RemoveFinalizersFromReviewApp), varargs...)
}

// UpdateReviewAppManagerStatus mocks base method.
func (m *MockKubernetesRepository) UpdateReviewAppManagerStatus(ctx context.Context, ram models.ReviewAppManager) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateReviewAppManagerStatus", ctx, ram)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateReviewAppManagerStatus indicates an expected call of UpdateReviewAppManagerStatus.
func (mr *MockKubernetesRepositoryMockRecorder) UpdateReviewAppManagerStatus(ctx, ram interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateReviewAppManagerStatus", reflect.TypeOf((*MockKubernetesRepository)(nil).UpdateReviewAppManagerStatus), ctx, ram)
}
